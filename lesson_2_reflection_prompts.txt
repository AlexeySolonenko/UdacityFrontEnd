What happens when you initialize a repository?
Git software installed on yrou OS creates specific hidden folders and files that allow you to use the contents and the files initialized in this repository as git repository content.

Why do you need to do it?
To show to Git what files arre required to be 'gitted' as a repository.



How is the staging area different from the working directory and the repository?

Working directory is a root directory where hard copies of the currently processed git files are located.
Repository is a combination o the current files and their commit history/log.
Stage is the virtual area that lists files prepared for commit and/or (I do not know yet) requiring a commit.

What value do you think it offers?
It is a great tool for proper planning and working out of your commits. Once you finalized a set of a logically completed changes, then you can submit them without creating a numerious usless commits.



How can you use the staging area to make sure you have one commit per logical
change?
One shall add all the files to be commited to the staging area. then either only the selected files shall be commited, or diff shall be used to verify that there are either no other changes in teh working directoyr, or that these changes may be ignored/discarded.


What are some situations when branches would be helpful in keeping your history
organized?
(1) for testing (2) for developing of alternative options (3) for developing of products based on a common core.


How would branches help?

How do the diagrams help you visualize the branch structure?


In my opinion it should be used as a planning tool mostly. Temporary small branches can be integrated in the process ad-hoc. However, fundamental project design shall be implemennted afore-ahead.

What is the result of merging two branches together?
As I can undertand it, the result is XOR of a line-by-line comparison of two files. An important note, that, again, I guess, Git assignes to lines its own numbers, which are kind of consistent through-out the history. Physical line number may change, of course. Acutually, I am kind of to check it out.


 Why do we represent it in
the diagram the way we do?




What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?




Testing branching 